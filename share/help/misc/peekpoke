Peek / Poke list

   Much of Axmud's internal data is available to you, and to any scripts and
      plugins you write.
   This data can be accessed using the client commands ';peek' and ';poke'.
      Axbasic scripts can access the data through a number of statements, for
      example PEEK and POKE. Plugins (written in perl) can access the data
      directly, or through a call to GA::Session->parsePeekPoke.

   A peek operation allows you to see internal data.  A poke operation allows
      you to modify it. Most of Axmud's internal data can be seen via a peek
      operation, but in general, data can only be modified in a poke operation
      when it's safe to do so.

   Peek and poke operations take a string as an argument. The string is
      separated into a compulsory object part and an optional IV (instance
      variable) part.
   (In Perl terminology, an object is a collection of data, and an IV is a
      variable stored in that collection. The variable can be a scalar, list or
      hash.)
   An example of an object part is 'prof.deathmud', representing a world profile
      called 'deathmud', and an example of an IV part is 'port'. Thus, you can
      access the world's port by peeking the string 'prof.deathmud.port'.

   The object part is translated into the blessed reference of the object. (In
      Perl terminology, the blessed reference is a name given to each distinct
      object.)
   If an IV part is specified, the peek/poke operation returns the value of the
      IV. If no IV part is specified, the peek/poke operation returns the
      blessed reference of the object.

   This document contains a complete list of strings that can be used in peek/
      poke operations.

   In some cases, the string corresponds to a particular IV in a particular
      object, e.g. 'world.current' refers to the current world profile (the
      Perl class is GA::Session->currentWorld).
   In some cases, the string refers to a whole object, e.g. 'dict.current'
      refers to the current dictionary (the Perl class is
      GA::Session->currentDict). In those cases, you can add any valid IV to the
      string, e.g. 'dict.current.weaponHash'. The IV part is case-sensitive, so
      'dict.current.weaponhash' will not work.

   Axmud global variables like $axmud::SCRIPT are used here as if they were IVs
      in the GA::Client object (for convenience).

   The values returned by many strings depend on the session. For example,
      'dict.current' will return this session's current dictionary, not some
      other session's current dictionary.
   Although it's possible to directly modify an IV's value with a poke
      operation, doing so is STRONGLY DISCOURAGED.
   It is almost always better to use client commands and Axmud's edit,
      preference and wizard windows, which take care of all the complications
      that might not be obvious to you.
   If you do need to modify values directly (for testing purposes, perhaps), you
      should at least read the comments in the source code for the object you're
      modifying. (Most of what you need is in the ->new function.)
   All Axmud objects have a ->_privFlag IV. If the value is TRUE, that object's
      IVs are 'private' and cannot be modified in a poke operation at all. If
      the value is FALSE, that object's IVs are 'public' and can be modified in
      a poke operation.
   Objects whose ->_privFlag is FALSE are designed (for the most part) as simple
      stores of data, so it's usually safe to modify them directly (but still
      read the source code first).
   All IVs beginning with an underline, such as ->_privFlag itself, are
      'standard' IVs that can't be modified in any circumstances.

   The strings specified below return the following kinds of value in a peek/
      poke operation:

         o - object whose ->_privFlag is FALSE (IVs are public)
         O - object whose ->_privFlag is TRUE (IVs are private)
         s - scalar
         S - read-only scalar
         f - scalar flag (always TRUE or FALSE)
         F - read-only scalar flag (always TRUE or FALSE)
         l - list
         L - read-only list
         h - hash
         H - read-only hash
         X - read-only scalar, list or hash (for JSON data structures)


   S aard102.status
        Current AARD102 status notification (GA::Session->aard102Status)
   S aard102.tick
        Time of last tick received via AARD102 (GA::Session->aard102TickTime)
        
   
   L atcp.list
        List of (all) ATCP packages received (from GA::Session->atcpDataHash)
   L atcp.list.PACKAGE
        List of ATCP packages received in the form
           PACKAGE[.subpackage][.message] (from GA::Session->atcpDataHash)
   L atcp.list.PACKAGE.SUBPACKAGE
        List of ATCP packages received in the form
           PACKAGE[.SUBPACKAGE][.message] (from GA::Session->atcpDataHash)
   S atcp.data.PACKAGE[.SUBPACKAGE][.MESSAGE]
        Value of undecoded data string in the ATCP package (from
           GA::Session->atcpDataHash)
   X atcp.val.PACKAGE[.SUBPACKAGE][.MESSAGE][.json]
        A value embedded within the JSON data. 'json' is made up of any number
           of '.INDEX' and '.KEY' components, in any order. The returned value
           is the scalar, list or hash value stored within the embedded list/
           hash references; or 'undef' if '.json' doesn't match any embedded
           scalar value (from GA::Session->atcpDataHash)


   s buffer.size.display
        Custom maximum display buffer size (GA::Client->customDisplayBufferSize)
   s buffer.size.instruct
        Custom maximum instruction buffer size
           (GA::Client->customInstructBufferSize)
   s buffer.size.cmd
        Custom maximum world command buffer size
           (GA::Client->customCmdBufferSize)
   o buffer.client.instruct.NUMBER
        Client's instruction buffer object NUMBER (from
           GA::Client->instructBufferHash)
   S buffer.client.instruct.count
        No. instructions processed altogether (GA::Client->instructBufferCount)
   S buffer.client.instruct.first
        NUMBER of earliest surviving buffer object
           (GA::Client->instructBufferFirst)
   S buffer.client.instruct.last
        NUMBER of most recent buffer object (GA::Client->instructBufferLast)
   o buffer.client.cmd.NUMBER
        Client's world command buffer object NUMBER (from
           GA::Client->cmdBufferHash)
   S buffer.client.cmd.count
        No. commands processed altogether (GA::Client->cmdBufferCount)
   S buffer.client.cmd.first
        NUMBER of earliest surviving buffer object (GA::Client->cmdBufferFirst)
   S buffer.client.cmd.last
        NUMBER of most recent buffer object (GA::Client->cmdBufferLast)
   o buffer.session.display.NUMBER
        Session's display buffer object NUMBER (from
           GA::Session->displayBufferHash)
   S buffer.session.display.count
        No. lines processed altogether (GA::Session->displayBufferCount)
   S buffer.session.display.first
        NUMBER of earliest surviving buffer object
           (GA::Session->displayBufferFirst)
   S buffer.session.display.last
        NUMBER of most recent buffer object (GA::Session->displayBufferLast)
   o buffer.session.instruct.NUMBER
        Session's instruction buffer object NUMBER (from
           GA::Session->instructBufferHash)
   S buffer.session.instruct.count
        No. instructions processed altogether (GA::Session->instructBufferCount)
   S buffer.session.instruct.first
        NUMBER of earliest surviving buffer object
           (GA::Session->instructBufferFirst)
   S buffer.session.instruct.last
        NUMBER of most recent buffer object (GA::Session->instructBufferLast)
   o buffer.session.cmd.NUMBER
        Session's world command buffer object NUMBER (from
           GA::Session->cmdBufferHash)
   S buffer.session.cmd.count
        No. commands processed altogether (GA::Session->cmdBufferCount)
   S buffer.session.cmd.first
        NUMBER of earliest surviving buffer object (GA::Session->cmdBufferFirst)
   S buffer.session.cmd.last
        NUMBER of most recent buffer object (GA::Session->cmdBufferLast)


   o cage.current.TYPE.CATEGORY
        Current cage of type 'TYPE' (e.g. 'trigger') associated with the
           category 'CATEGORY' (from GA::Session->currentCageHash)
   o cage.name.NAME
        Cage called 'NAME' (from GA::Session->cageHash)
   o cage.TYPE.PROF
        Cage of type 'TYPE' (e.g. 'trigger') associated with the profile called
           'PROF' (from GA::Session->cageHash)
   L cage.type.list
        Customisable list of cage types (GA::Client->cageTypeList)


   o char.current
        Current character profile (GA::Session->currentChar)
   o char.NAME
        Character profile called 'NAME' (from GA::Session->profHash)


   o chat.contact.NAME
        Chat contact object called 'NAME' (from GA::Client->chatContactHash)
   S chat.name
        Chat task name to broadcast (GA::Client->chatName)
   S chat.email
        Chat task email to broadcast (GA::Client->chatEmail)
   S chat.mode
        Chat task accept mode (GA::Client->chatAcceptMode)
   S chat.icon
        Chat task icon to broadcast (from GA::Client->chatIcon)


   S client.name
        $SCRIPT (Axmud global variable)
   S client.name.short
        $NAME_SHORT (Axmud global variable)
   S client.name.article
        $NAME_ARTICLE (Axmud global variable)
   S client.version
        $VERSION (Axmud global variable)
   S client.date
        $DATE (Axmud global variable)
   S client.basic.name
        $BASIC_NAME (Axmud global variable)
   S client.basic.article
        $BASIC_ARTICLE (Axmud global variable)
   S client.basic.version
        $BASIC_VERSION (Axmud global variable)
   S client.authors
        $AUTHORS (Axmud global variable)
   S client.copyright
        $COPYRIGHT (Axmud global variable)
   S client.url
        $URL (Axmud global variable)
   S client.file.name
        $NAME_FILE (Axmud global variable)
   L client.file.list
        @COMPAT_FILE_LIST (Axmud global variable)
   S client.dir.base
        $BASE_DIR (Axmud global variable)
   S client.dir.data
        $DATA_DIR (Axmud global variable)
   L client.dir.list
        @COMPAT_DIR_LIST (Axmud global variable)
   L client.ext.list
        @COMPAT_EXT_LIST (Axmud global variable)
   F client.mode.blind
        $BLIND_MODE_FLAG (Axmud global variable)
   F client.mode.safe
        $SAFE_MODE_FLAG (Axmud global variable)
   F client.mode.test
        $TEST_MODE_FLAG (Axmud global variable)
   L client.license
        @LICENSE_LIST (Axmud global variable)
   L client.credit
        @CREDIT_LIST (Axmud global variable)

   S client.start.time
        Client start time (system time, in secs) (GA::Client->startTime)
   S client.start.clock
        Time client started (GA::Client->startClock)
   S client.start.date
        Date client started (GA::Client->startDate)
   S client.start.clockstring
        Time client started, formatted string (GA::Client->startClockString)
   S client.start.datestring
        Date client started, formatted string (GA::Client->startDateString)
   S client.delay.prompt
        Time to wait before using a prompt (GA::Client->promptWaitTime)
   S client.delay.login
        Time to wait before showing login warning (GA::Client->loginWarningTime)
   L client.iv
        List of IVs required in all Perl objects (from GA::Client->constIVHash)
   L client.reserved
        List of reserved names (from GA::Client->constReservedHash)


   o colour.scheme.NAME
   o color.scheme.NAME
        Colour scheme object called 'NAME' (from GA::Client->colourSchemeHash)
   S colour.system.cmd
   S color.system.cmd
        Colour for sent world commands (GA::Client->customInsertCmdColour)
   S colour.system.text
   S color.system.text
        Colour for system messages (GA::Client->customShowSystemTextColour)
   S colour.system.error
   S color.system.error
        Colour for system error messages (GA::Client->customShowErrorColour)
   S colour.system.warning
   S color.system.warning
        Colour for system warning messages (GA::Client->customShowWarningColour)
   S colour.system.debug
   S color.system.debug
        Colour for system debug messages (GA::Client->customShowDebugColour)
   S colour.system.improper
   S color.system.improper
        Colour for system improper arguments messages
           (GA::Client->customShowImproperColour)
   F colour.flag.invisible
   F color.flag.invisible
        Convert text colour if background colour is the same
           (GA::Client->convertInvisibleFlag)
   S colour.rgb.TAG
   S color.rgb.TAG
        RGB (e.g. '#ABCDEF') for standard colour TAG (from
           GA::Client->colourTagHash and ->boldColourTagHash)
   S colour.misc.xterm
   S color.misc.xterm
        xterm colour cube in use (GA::Client->currentColourCube)
   F colour.misc.osc
   F color.misc.osc
        OSC colour paletters allowed (GA::Client->oscPaletteFlag)


   o custom.current.CATEGORY
        Current custom profile of category 'CATEGORY' (from
           GA::Session->currentProfHash)
   o custom.NAME
        Custom profile called 'NAME' (from GA::Session->profHash)


   F debug.protocol.escape
        Show invalid escape sequences (GA::Client->debugEscSequenceFlag)
   F debug.protocol.telnet
        Show incoming option negotiation info (GA::Client->debugTelnetFlag)
   F debug.protocol.telnet.short
        Show incoming option negotiation short info
           (GA::Client->debugTelnetMiniFlag)
   F debug.protocol.log
        Write log for incoming option negotiation, telopt.log
           (GA::Client->debugTelnetLogFlag)
   F debug.protocol.msdp
        Show MSDP data sent to Locator/Status tasks (GA::Client->debugMsdpFlag)
   F debug.protocol.mxp
        Show MXP errors (GA::Client->debugMxpFlag)
   F debug.protocol.mxp.comment
        Show MXP comments (GA::Client->debugMxpCommentFlag)
   F debug.protocol.pueblo
        Show Pueblo errors (GA::Client->debugPuebloFlag)
   F debug.protocol.pueblo.comment
        Show Pueblo comments (GA::Client->debugPuebloCommentFlag)
   f debug.protocol.zmp
        Show ZMP errors (GA::Client->debugZmpFlag)        
   f debug.protocol.atcp
        Show ATCP data (GA::Client->debugAtcpFlag)
   f debug.protocol.gmcp
        Show GMCP data (GA::Client->debugGmcpFlag)
   f debug.protocol.mcp
        Show MCP errors (GA::Client->debugMcpFlag)
   F debug.line.numbers
        Show explicit line numbers (GA::Client->debugLineNumsFlag)
   F debug.line.tags
        Show explicit colour/style tags (GA::Client->debugLineTagsFlag)
   F debug.locator.some
        Show some Locator debug messages (GA::Client->debugLocatorFlag)
   F debug.locator.all
        Show all Locator debug messages (GA::Client->debugMaxLocatorFlag)
   F debug.locator.exit
        Show illegal exit direction debug messages
            (GA::Client->debugMaxLocatorFlag)
   F debug.locator.move
        Show Locator's movement command list (GA::Client->debugMoveListFlag)
   F debug.obj.parse
        Show debug messages when parsing objects (GA::Client->debugParseObjFlag)
   F debug.obj.compare
        Show debug messages when comparing objects
           (GA::Client->debugCompareObjFlag)
   F debug.error.plugin
        Show explanatory messages if plugin can't be loaded
           (GA::Client->debugExplainPluginFlag)
   F debug.error.iv
        Show debug message for non-existent IVs (GA::Client->debugCheckIVFlag)
   F debug.error.table
        Show debug message if table object can't be added/resized
           (GA::Client->debugTableFitFlag)
   F debug.error.trap
        Trap Perl errors/warnings in 'main' window
           (GA::Client->debugTrapErrorFlag)


   S desktop.panel.left
        Size of left panel (GA::Client->customPanelLeftSize)
   S desktop.panel.right
        Size of right panel (GA::Client->customPanelRightSize)
   S desktop.panel.top
        Size of top panel (GA::Client->customPanelTopSize)
   S desktop.panel.bottom
        Size of bottom panel (GA::Client->customPanelBottomSize)
   S desktop.controls.left
        Size of left-side window controls (GA::Client->customControlsLeftSize)
   S desktop.controls.right
        Size of right-side window controls (GA::Client->customControlsRightSize)
   S desktop.controls.top
        Size of top-side window controls (GA::Client->customControlsTopSize)
   S desktop.controls.bottom
        Size of bottom-side window controls
           (GA::Client->customControlsBottomSize)


   O dict.current
        Current dictionary object (GA::Session->currentDict)
   O dict.NAME
        Dictionary object called 'NAME' (from GA::Client->dictHash)


   o exit.number.NUMBER
        Exit model object with number 'NUMBER' (from
           GA::Obj::WorldModel->exitModelHash)
   o exit.newest
        Most recently-created exit model object
           (GA::Obj::WorldModel->mostRecentExitNum)
   S exit.count
        No. exits in model (including deleted exits)
           (GA::Obj::WorldModel->exitObjCount)
   S exit.actual
        No. exits in model (not including deleted exits)
           (GA::Obj::WorldModel->exitActualCount)


   S external.browser
        Command to run a web browser (GA::Client->browserCmd)
   S external.email
        Command to open email app (GA::Client->emailCmd)
   S external.audio
        Command to open audio player (GA::Client->audioCmd)
   S external.editor
        Command to open text editor (GA::Client->textEditCmd)


   F file.config.load
        Load config file (GA::Client->loadConfigFlag)
   F file.config.save
        Load config file (GA::Client->saveConfigFlag)
   F file.data.load
        Load data files (GA::Client->loadDataFlag)
   F file.data.save
        Save data files (GA::Client->saveDataFlag)
   F file.start.delete
        Delete config/data files on startup (GA::Client->deleteFilesAtStartFlag)
   F file.load.fail
        File operation failure (GA::Client->fileFailFlag)
   F file.save.backup
        Backup files before saving (GA::Client->autoRetainFileFlag)
   F file.save.modify
        Data saved in any file objects have been modified
           (GA::Client->showModFlag)
   F file.autosave.flag
        Auto-save turned on (GA::Client->autoSaveFlag)
   S file.autosave.time
        Minutes between autosaves (GA::Client->autoSaveWaitTime)
   O file.client.NAME
        Client file object called NAME (from GA::Client->fileObjHash)
   O file.session.NAME
        Session file object called NAME (from GA::Session->sessionFileObjHash)


   L gmcp.list
        List of (all) GMCP packages received (from GA::Session->gmcpDataHash)
   L gmcp.list.PACKAGE
        List of GMCP packages received in the form
           PACKAGE[.subpackage][.message] (from GA::Session->gmcpDataHash)
   L gmcp.list.PACKAGE.SUBPACKAGE
        List of GMCP packages received in the form PACKAGE.SUBPACKAGE[.message]
           (from GA::Session->gmcpDataHash)
   S gmcp.data.PACKAGE[.SUBPACKAGE][.MESSAGE]
        Value of undecoded data string in the GMCP package (from
           GA::Session->gmcpDataHash)
   X gmcp.val.PACKAGE[.SUBPACKAGE][.MESSAGE][.json]
        A value embedded within the JSON data. 'json' is made up of any number
           of '.INDEX' and '.KEY' components, in any order. The returned value
           is the scalar, list or hash value stored within the embedded list/
           hash references; or 'undef' if '.json' doesn't match any embedded
           scalar value (from GA::Session->gmcpDataHash)


   o guild.current
        Current guild profile (GA::Session->currentGuild)
   o guild.NAME
        Guild profile called 'NAME' (from GA::Session->profHash)


   O iface.name.NAME
        Active interface called 'NAME' (from GA::Session->interfaceHash)
   O iface.number.NUMBER
        Active interface numbered 'NUMBER' (from GA::Session->interfaceNumHash)


   O imodel.TYPE
        Interface model of the type 'TYPE', e.g. 'trigger' (from
          GA::Client->interfaceModelHash)


   S instruct.sigil.client
        Instruction sigil for client commands (GA::Client->constClientSigil)
   S instruct.sigil.forced
        Instruction sigil for forced world commands
           (GA::Client->constForcedSigil)
   S instruct.sigil.echo
        Instruction sigil for echo commands (GA::Client->constEchoSigil)
   S instruct.sigil.perl
        Instruction sigil for Perl commands (GA::Client->constPerlSigil)
   S instruct.sigil.script
        Instruction sigil for script commands (GA::Client->constScriptSigil)
   S instruct.sigil.multi
        Instruction sigil for multi commands (GA::Client->constMultiSigil)
   S instruct.sigil.speedwalk
        Instruction sigil for speedwalk commands (GA::Client->constSpeedSigil)
   S instruct.sigil.bypass
        Instruction sigil for bypass commands (GA::Client->constBypassSigil)
   F instruct.enable.echo
        Echo command sigil enabled (GA::Client->echoSigilFlag)
   F instruct.enable.perl
        Perl command sigil enabled (GA::Client->perlSigilFlag)
   F instruct.enable.script
        Script command sigil enabled (GA::Client->scriptSigilFlag)
   F instruct.enable.multi
        Multi command sigil enabled (GA::Client->multiSigilFlag)
   F instruct.enable.speed
        Speed command sigil enabled (GA::Client->speedSigilFlag)
   F instruct.enable.bypass
        Bypass command sigil enabled (GA::Client->bypassSigilFlag)
   S instruct.separator
        World command separator (GA::Client->cmdSep)
   F instruct.world.confirm
        Confirm world commands in session's default tab
           (GA::Client->confirmWorldCmdFlag)
   F instruct.world.convert
        Convert capitalised world commands (GA::Client->convertWorldCmdFlag)
   F instruct.world.preserve
        Preserve world commands in entry box (GA::Client->preserveWorldCmdFlag)
   F instruct.other.preserve
        Preserve other commands in entry box (GA::Client->preserveOtherCmdFlag)
   F instruct.multi.max
        Send multi commands to all sessions (GA::Client->maxMultiCmdFlag)
   F instruct.complete.mode
        Auto-complete mode (GA::Client->autoCompleteMode)
   F instruct.complete.type
        Auto-complete navigation type (GA::Client->autoCompleteType)
   F instruct.complete.parent
        Auto-complete registry location (GA::Client->autoCompleteParent)


   F log.allow
        Logging is enabled (GA::CLIENT->allowLogsFlag)
   F log.client.FILE
        Flag to show whether the client logfile called 'FILE' is being written
           (from GA::Client->logPrefHash)
   F log.world.FILE
        Flag to show whether the world logfile called 'FILE' is being written
           (from GA::Profile::World->logPrefHash)
   F log.delete.standard
        Delete client logfiles when client starts
           (GA::Client->deleteStandardLogsFlag)
   F log.delete.world
        Delete world logfiles when world becomes current
           (GA::Client->deleteWorldLogsFlag)
   F log.start.day
        Start new logfile every day (GA::Client->logDayFlag)
   F log.start.client
        Start new logfile when client starts (GA::Client->logClientFlag)
   F log.prefix.date
        Prefix every line with date (GA::Client->logPrefixDateFlag)
   F log.prefix.time
        Prefix every line with time (GA::Client->logPrefixTimeFlag)
   F log.image
        Record images in 'receive' logfile (GA::Client->logImageFlag)
   S log.event.before
        Lines to write before Status task event
           (GA::Client->statusEventBeforeCount)
   S log.event.after
        Lines to write after Status task event
           (GA::Client->statusEventAfterCount)


   S loop.client.time
        Client loop time (GA::Client->clientTime)
   O loop.client.obj
        Client loop object (GA::Client->clientLoopObj)
   F loop.client.spin
        Client loop is spinning (GA::Client->clientLoopSpinFlag)
   S loop.client.delay
        Client loop delay time (GA::Client->clientLoopDelay)
   S loop.session.time
        Session loop time (GA::Session->sessionTime)
   S loop.session.obj
        Session loop object (GA::Session->sessionLoopObj)
   F loop.session.spin
        Session loop is spinning (GA::Session->sessionLoopSpinFlag)
   F loop.session.child
        Session loop's child loop is spinning (GA::Session->childLoopSpinFlag)
   S loop.session.delay
        Session loop delay time (GA::Session->sessionLoopDelay)


   L misc.months
        Customisable list of short months (GA::Client->customMonthList)
   L misc.days
        Customisable list of short days (GA::Client->customDayList)


   s model.author
        World model author (GA::Obj::WorldModel->author)
   s model.date
        World model date (GA::Obj::WorldModel->date)
   s model.version
        World model version (GA::Obj::WorldModel->version)
   l model.descripList
        World model description (GA::Obj::WorldModel->descripList)
   o model.number.NUMBER
        World model object with number 'NUMBER' (from
           GA::Obj::WorldModel->modelHash)
   o model.region.NUMBER
        World model region object with number 'NUMBER' (from
           GA::Obj::WorldModel->regionModelHash)
   o model.room.NUMBER
        World model room object with number 'NUMBER' (from
           GA::Obj::WorldModel->roomModelHash)
   o model.weapon.NUMBER
        World model weapon object with number 'NUMBER' (from
           GA::Obj::WorldModel->weaponModelHash)
   o model.armour.NUMBER
        World model region object with number 'NUMBER' (from
           GA::Obj::WorldModel->armourModelHash)
   o model.garment.NUMBER
        World model garment object with number 'NUMBER' (from
           GA::Obj::WorldModel->garmentModelHash)
   o model.char.NUMBER
        World model char object with number 'NUMBER' (from
           GA::Obj::WorldModel->charModelHash)
   o model.minion.NUMBER
        World model minion object with number 'NUMBER' (from
           GA::Obj::WorldModel->minionModelHash)
   o model.sentient.NUMBER
        World model sentient object with number 'NUMBER' (from
           GA::Obj::WorldModel->sentientModelHash)
   o model.creature.NUMBER
        World model creature object with number 'NUMBER' (from
           GA::Obj::WorldModel->creatureModelHash)
   o model.portable.NUMBER
        World model portable object with number 'NUMBER' (from
           GA::Obj::WorldModel->portableModelHash)
   o model.decoration.NUMBER
        World decoration region object with number 'NUMBER' (from
           GA::Obj::WorldModel->decorationModelHash)
   o model.custom.NUMBER
        World model custom object with number 'NUMBER' (from
           GA::Obj::WorldModel->customModelHash)
   O model.regionmap.NAME
        World model regionmap called 'NAME' (from
           GA::Obj::WorldModel->regionmapHash)
   o model.kchar.NAME
        World model known character called 'NAME' (from
           GA::Obj::WorldModel->knownCharHash)
   o model.mstring.STRING
        World model minion string 'STRING' (from
           GA::Obj::WorldModel->minionStringHash)
   o model.tag.TAG
        World model room object with room tag 'TAG' (from
           GA::Obj::WorldModel->roomTagHash)
   o model.newest
        Most recently-created world model object
           (GA::Obj::WorldModel->mostRecentNum)
   S model.count
        No. objects in world model (including deleted objects)
           (GA::Obj::WorldModel->modelObjCount)
   S model.actual
        No. objects in world model (not including deleted objects)
           (GA::Obj::WorldModel->modelActualCount)
   S model.lightStatus
        Current light status (GA::Obj::WorldModel->...)
   S model.defaultGridWidthBlocks
        Default grid width (in blocks) (GA::Obj::WorldModel->...)
   S model.defaultGridHeightBlocks
        Default grid height (in blocks) (GA::Obj::WorldModel->...)
   S model.defaultBlockWidthPixels
        Default block width (in pixels) (GA::Obj::WorldModel->...)
   S model.defaultBlockHeightPixels
        Default block height (in pixels) (GA::Obj::WorldModel->...)
   S model.defaultRoomWidthPixels
        Default room width (in pixels) (GA::Obj::WorldModel->...)
   S model.defaultRoomHeightPixels
        Default room width (in pixels) (GA::Obj::WorldModel->...)
   S model.maxGridWidthBlocks
        Max grid width (in blocks) (GA::Obj::WorldModel->...)
   S model.maxGridHeightBlocks
        Max grid height (in blocks) (GA::Obj::WorldModel->...)
   S model.maxBlockWidthPixels
        Max block width (in pixels) (GA::Obj::WorldModel->...)
   S model.maxBlockHeightPixels
        Max block height (in pixels) (GA::Obj::WorldModel->...)
   S model.maxRoomWidthPixels
        Max room width (in pixels) (GA::Obj::WorldModel->...)
   S model.maxRoomHeightPixels
        Max room height (in pixels) (GA::Obj::WorldModel->...)
   S model.defaultMapWidthPixels
        Default map width (in pixels) (GA::Obj::WorldModel->...)
   S model.defaultMapHeightPixels
        Default map height (in pixels) (GA::Obj::WorldModel->...)
   S model.currentRoomMode
        Room drawing mode (GA::Obj::WorldModel->...)
   S model.roomInteriorMode
        Room interior mode (GA::Obj::WorldModel->...)
   S model.drawExitMode
        Exit drawing mode (GA::Obj::WorldModel->...)
   F model.drawOrnamentsFlag
        Draw exit ornaments (GA::Obj::WorldModel->...)
   S model.horizontalExitLengthBlocks
        Length of horizontal exits (in blocks) (GA::Obj::WorldModel->...)
   S model.verticalExitLengthBlocks
        Length of vertical exits (in blocks) (GA::Obj::WorldModel->...)
   F model.drawBentExitsFlag
        Draw bent exits (GA::Obj::WorldModel->...)
   F model.matchTitleFlag
        Match room titles (GA::Obj::WorldModel->...)
   F model.matchDescripFlag
        Match room descriptions (GA::Obj::WorldModel->...)
   S model.matchDescripCharCount
        No. characters to match in descriptions  (GA::Obj::WorldModel->...)
   F model.matchExitFlag
        Match room exits (GA::Obj::WorldModel->...)
   F model.analyseDescripFlag
        Analyse room descriptions (GA::Obj::WorldModel->...)
   F model.matchSourceFlag
        Match room's source code file (GA::Obj::WorldModel->...)
   F model.matchVNumFlag
        Match room's remove vnum (GA::Obj::WorldModel->...)
   F model.updateTitleFlag
        Update room titles (in 'update' mode) (GA::Obj::WorldModel->...)
   F model.updateDescripFlag
        Update room descriptions (GA::Obj::WorldModel->...)
   F model.updateExitFlag
        Update room exits (GA::Obj::WorldModel->...)
   F model.updateSourceFlag
        Update room's source code file (GA::Obj::WorldModel->...)
   F model.updateVNumFlag
        Update room's remote vnum (GA::Obj::WorldModel->...)
   F model.updateRoomCmdFlag
        Update room's room command list (GA::Obj::WorldModel->...)
   F model.updateOrnamentFlag
        Update room's exit ornaments (GA::Obj::WorldModel->...)
   S model.autoCompareMode
        Current auto-compare mode setting (GA::Obj::WorldModel->...)
   F model.autoCompareAllFlag
        Compare rooms in whole model, not just region (GA::Obj::WorldModel->...)
   S model.autoCompareMax
        Maximum number of room comparisons (GA::Obj::WorldModel->...)
   S model.autoSlideMode
        Current auto-slide mode setting (GA::Obj::WorldModel->...)
   S model.autoSlideMax
        Maximum auto-slide distance (GA::Obj::WorldModel->...)
   F model.autoRescueFlag
        Auto-rescue mode is enabled (GA::Obj::WorldModel->...)
   F model.autoRescueFirstFlag
        In auto-rescue mode, merge rooms at first opportunity
           (GA::Obj::WorldModel->...)
   F model.autoRescuePromptFlag
        In auto-rescue mode, prompt before merging rooms at first opportunity
           (GA::Obj::WorldModel->...)
   F model.autoRescueNoMoveFlag
        In auto-rescue mode, don't move non-matching rooms
           (GA::Obj::WorldModel->...)
   F model.autoRescueVisitsFlag
        In auto-rescue mode, only update character visits in merged rooms
           (GA::Obj::WorldModel->...)
   F model.autoRescueForceFlag
        In auto-rescue mode, temporarily switch to 'update' mode
           (GA::Obj::WorldModel->...)
   F model.assistedMovesFlag
        Apply assisted moves (GA::Obj::WorldModel->...)
   F model.assistedBreakFlag
        Break down doors (GA::Obj::WorldModel->...)
   F model.assistedPickFlag
        Pick locks (GA::Obj::WorldModel->...)
   F model.assistedUnlockFlag
        Unlock doors (GA::Obj::WorldModel->...)
   F model.assistedOpenFlag
        Open doors (GA::Obj::WorldModel->...)
   F model.assistedCloseFlag
        Close doors (GA::Obj::WorldModel->...)
   F model.assistedLockFlag
        Lock doors (GA::Obj::WorldModel->...)
   F model.protectedMovesFlag
        Protected moves (GA::Obj::WorldModel->...)
   F model.superProtectedMovesFlag
        Super-protected moves (GA::Obj::WorldModel->...)
   F model.setTwinOrnamentFlag
        Set twin exit's ornament (GA::Obj::WorldModel->...)
   F model.countVisitsFlag
        Count character visits (GA::Obj::WorldModel->...)
   F model.allowModelScriptFlag
        Allow model-wide scripts (GA::Obj::WorldModel->...)
   F model.allowRoomScriptFlag
        Allow individual room scripts (GA::Obj::WorldModel->...)
   F model.intelligentExitsFlag
        Use intelligent exits (GA::Obj::WorldModel->...)
   F model.followAnchorFlag
        Create new exit object using follow anchor pattern
           (GA::Obj::WorldModel->...)
   F model.capitalisedRoomTagFlag
        Display room tags in capitals (GA::Obj::WorldModel->...)
   F model.showTooltipsFlag
        Show tooltips (GA::Obj::WorldModel->...)
   F model.explainGetLostFlag
        Explain when automapper gets lost (GA::Obj::WorldModel->...)
   F model.disableUpdateModeFlag
        Disable automapper update mode (GA::Obj::WorldModel->...)
   F model.updateExitTagFlag
        Update region exit tags (GA::Obj::WorldModel->...)
   F model.drawRoomEchoFlag
        Draw room echos (GA::Obj::WorldModel->...)
   F model.trackPosnFlag
        Track position and scroll window (GA::Obj::WorldModel->...)
   S model.trackingSensitivity
        Tracking sensitivity (GA::Obj::WorldModel->...)
   F model.avoidHazardsFlag
        Avoid hazards when pathfinding (GA::Obj::WorldModel->...)
   F model.postProcessingFlag
        Produce smooth paths when pathfinding (GA::Obj::WorldModel->...)
   F model.quickPathFindFlag
        Go to double-clicked room (GA::Obj::WorldModel->...)
   F model.autocompleteExitsFlag
        Auto-complete uncertain exits (GA::Obj::WorldModel->...)
   S model.mudlibPath
        Mudlib directory path (GA::Obj::WorldModel->...)
   S model.mudlibExtension
        Mudlib file extension (GA::Obj::WorldModel->...)
   F model.paintAllRoomsFlag
        Paint existing rooms (GA::Obj::WorldModel->...)
   F model.locateRandomInRegionFlag
        Locate after random region exit (GA::Obj::WorldModel->...)
   F model.locateRandomAnywhereFlag
        Locate after general region exit (GA::Obj::WorldModel->...)
   S model.pathFindStepLimit
        Path-finding step limit (GA::Obj::WorldModel->...)


   L msdp.generic.list
        List of generic MSDP variables (from GA::Session->msdpGenericValueHash)
   S msdp.generic.VAR
        Value of generic MSDP variable 'VAR'; if 'VAR' contains space
           characters, write them as underline characters, e.g. 'PAY_FOR_PERKS'
           (from GA::Session->msdpGenericValueHash)
   L msdp.custom.list
        List of custom MSDP variables (from GA::Session->msdpCustomValueHash)
   S msdp.custom.VAR
        Value of custom MSDP variable 'VAR'; if 'VAR' contains space characters,
           write them as underline characters (from
           GA::Session->msdpCustomValueHash)


   L mssp.generic.list
        List of generic MSSP variables 'VAR' (from
           GA::Profile::World->msspGenericValueHash)
   S mssp.generic.VAR
        Value of generic MSSP variable 'VAR'; if 'VAR' contains space
           characters, write them as underline characters (from
           GA::Profile::World->msspGenericValueHash)
   L mssp.custom.list
        List of custom MSSP variables 'VAR' (from
           GA::Profile::World->msspCustomValueHash)
   S mssp.custom.VAR
        Value of custom MSSP variable 'VAR'; if 'VAR' contains space characters,
           write them as underline characters (from
           GA::Profile::World->msspCustomValueHash)


   L mxp.entity.list
        List of MXP entities (custom entities only)
   S mxp.entity.VAR
        Value of MXP entity 'VAR' (both custom and standard entities) (from
           GA::Session->mxpEntityHash)


   L plugin.init
        List of plugins to load at startup (GA::Client->initPluginList)
   L plugin.load
        List of plugins loaded (from GA::Client->pluginHash)
   O plugin.NAME
        Axmud plugin object called 'NAME' (from GA::Client->pluginHash)


   o prof.NAME
        Profile called 'NAME' (from GA::Session->profHash, or else
           GA::Client->worldProfHash)
   L prof.priority.list
        Profile priority list in current session (GA::Session->profPriorityList)


   F protocol.echo
        Use ECHO protocol (GA::Client->useEchoFlag)
   F protocol.sga
        Use SGA protocol (GA::Client->useSgaFlag)
   F protocol.ttype
        Use TTYPE protocol (GA::Client->useTTypeFlag)
   F protocol.eor
        Use EOR protocol (GA::Client->useEorFlag)
   F protocol.naws
        Use NAWS protocol (GA::Client->useNawsFlag)
   F protocol.newenviron
        Use NEW-ENVIRON protocol (GA::Client->useNewEnvironFlag)
   F protocol.charset
        Use CHARSET protocol (GA::Client->useCharSetFlag)
   S protocol.ttype.mode
        Which termtypes to send during TTYPE/MTTS (GA::Client->termTypeMode)
   S protocol.ttype.name
        Custom client name to send (GA::Client->customClientName)
   S protocol.ttype.version
        Custom client version to send (GA::Client->customClientVersion)
   S protocol.ttype.sent
        Termtype actually sent (GA::Session->specifiedTType)

   F protocol.msdp
        Use MSDP MUD protocol (GA::Client->useMsdpFlag)
   F protocol.mssp
        Use MSSP MUD protocol (GA::Client->useMsspFlag)
   F protocol.mccp
        Use MCCP MUD protocol (GA::Client->useMccpFlag)
   F protocol.msp
        Use MSP MUD protocol (GA::Client->useMspFlag)
   F protocol.mxp
        Use MXP MUD protocol (GA::Client->useMxpFlag)
   F protocol.pueblo
        Use Pueblo MUD protocol (GA::Client->usePuebloFlag)
   F protocol.zmp
        Use ZMP MUD protocol (GA::Client->useZmpFlag)
   F protocol.aard102
        Use AARDWOLF102 MUD protocol (GA::Client->useAard102Flag)
   F protocol.atcp
        Use ATCP MUD protocol (GA::Client->useAtcpFlag)
   F protocol.gmcp
        Use GMCP MUD protocol (GA::Client->useGmcpFlag)
   F protocol.mtts
        Use MTTS MUD protocol (GA::Client->useMttsFlag)
   F protocol.mcp
        Use MCP MUD protocol (GA::Client->useMcpFlag)

   F protocol.msp.multiple
        Play simultaneous sound triggers (GA::Client->allowMspMultipleFlag)
   F protocol.msp.load
        Download sound files (GA::Client->allowMspLoadSoundFlag)
   F protocol.msp.flexible
        Recognise MSP tags in middle of line (GA::Client->allowMspFlexibleFlag)

   F protocol.mxp.font
        Allow font change (GA::Client->allowMxpFontFlag)
   F protocol.mxp.image.allow
        Allow image display (GA::Client->allowMxpImageFlag)
   F protocol.mxp.image.load
        Allow loading images (GA::Client->allowMxpLoadImageFlag)
   F protocol.mxp.image.filter
        Allow image filters (GA::Client->allowMxpFilterImageFlag)
   F protocol.mxp.sound.allow
        Allow sound (GA::Client->allowMxpSoundFlag)
   F protocol.mxp.sound.load
        Allow loading sound files (GA::Client->allowMxpLoadSoundFlag)
   F protocol.mxp.gauge
        Allow gauges (GA::Client->allowMxpGaugeFlag)
   F protocol.mxp.frame
        Allow frames (GA::Client->allowMxpFrameFlag)
   F protocol.mxp.interior
        Allow interior frames (GA::Client->allowMxpInteriorFlag)
   F protocol.mxp.crosslink
        Allow crosslink operations (GA::Client->allowMxpCrosslinkFlag)
   F protocol.mxp.room
        Locator uses MXP room tags exclusively change
           (GA::Client->allowMxpRoomFlag)
   F protocol.mxp.flexible
        Allow (some) illegal MXP keywords (GA::Client->allowMxpFlexibleFlag)

   S protocol.mode.echo
        Current session's ECHO mode (GA::Session->echoMode)
   S protocol.mode.sga
        Current session's SGA mode (GA::Session->sgaMode)
   S protocol.mode.eor
        Current session's EOR mode (GA::Session->eorMode)
   S protocol.mode.naws
        Current session's NAWS mode (GA::Session->nawsMode)
   S protocol.mode.msdp
        Current session's MSDP mode (GA::Session->msdpMode)
   S protocol.mode.mssp
        Current session's MSSP mode (GA::Session->msspMode)
   S protocol.mode.mccp
        Current session's MCCP mode (GA::Session->mccpMode)
   S protocol.mode.msp
        Current session's MSP mode (GA::Session->mspMode)
   S protocol.mode.mxp
        Current session's MXP mode (GA::Session->mxpMode)
   S protocol.mode.pueblo
        Current session's Pueblo mode (GA::Session->puebloMode)
   S protocol.mode.zmp
        Current session's ZMP mode (GA::Session->zmpMode)
   S protocol.mode.aard102
        Current session's AARD102 mode (GA::Session->aard102Mode)
   S protocol.mode.atcp
        Current session's ATCP mode (GA::Session->atcpMode)
   S protocol.mode.gmcp
        Current session's GMCP mode (GA::Session->gmcpMode)
   S protocol.mode.mcp
        Current session's MCP mode (GA::Session->mcpMode)


   o race.current
        Current race profile (GA::Session->currentRace)
   o race.NAME
        Race profile called 'NAME' (from GA::Session->profHash)


   F recording.active
        Recording currently in progress (GA::Session->recordingFlag)
   F recording.paused
        Recording currently paused (GA::Session->recordingPausedFlag)
   L recording.current
        Current recording, a list of strings (GA::Session->recordingList)
   F recording.position
        Current recording position (GA::Session->recordingPosn)


   S regex.url.long
        Regex matching valid web links (GA::Client->constUrlRegex)
   S regex.url.short
        Regex matching short web links (GA::Client->constShortUrlRegex)
   S regex.email
        Regex matching valid email addresses (GA::Client->constEmailRegex)


   L script.init.list
        List of scripts that start in every session
           (GA::Client->initScriptOrderList)
   S script.init.NAME
        Run mode for the initial script NAME (from GA::Client->initScriptHash)


   O session.obj.NUMBER
        Session object NUMBER (from GA::Client->sessionHash)
   S session.max
        Maximum sessions allowed (GA::Client->sessionMax)

   S session.number
        Current session number (GA::Session->number)
   O session.mainwin
        Current 'main' window object (GA::Session->mainWin)
   O session.tab.default
        Current session's default tab object (GA::Session->defaultTabObj)
   S session.tab.default.width
        Default tab width in chars (GA::Obj::TextView->textWidthChars)
   S session.tab.default.height
        Default tab height in chars (GA::Session->textHeightChars)
   O session.tab.current
        Current session's current tab object (GA::Session->currentTabObj)
   S session.tab.current.width
        Current tab width in chars (GA::Obj::TextView->textWidthChars)
   S session.tab.current.height
        Current tab height in chars (GA::Session->textHeightChars)
   O session.mapwin
        Current session's automapper window (GA::Session->mapWin)
   O session.map
        Current session's automapper object (GA::Session->mapObj)
   O session.model
        Current session's world model (GA::Session->worldModelObj)
   O session.history
        Current session's connection history object
           (GA::Session->connectHistoryObj)
   S session.charset
        Current session's character set (GA::Session->sessionCharSet)
   F session.login
        Current session's login flag (GA::Session->loginFlag)
   O session.mission
        Current session's current mission (GA::Session->currentMission)
   S session.queue
        Number of queued (excess) world commands
           (from GA::Session->excessCmdList)
   F session.quit
        Flag set if delayed quit IVs set (from GA::Session->delayedQuitTime)
   F session.freeze
        Flag set if task loop frozen (GA::Session->freezeTaskLoopFlag)
   S session.host
        Host address actually used (GA::Session->host)
   S session.port
        Port actually used (GA::Session->port)
   S session.protocol
        Connection protocol used (GA::Session->protocol)
   S session.status
        Session status (GA::Session->status)
   S session.packets
        No. packets received from world during session
           (GA::Session->packetCount)
   S session.time.display
        Time text last received from world (GA::Session->lastDisplayTime)
   S session.time.instruct
        Time last instruction processed (GA::Session->lastInstructTime)
   S session.time.cmd
        Time last world command processed (GA::Session->lastCmdTime)
   S session.time.outbounds
        Time last out-of-bounds communication processed
           (GA::Session->lastOutBoundsTime)
   S session.redirect.mode
        Redirect mode (GA::Session->redirectMode)
   S session.redirect.string
        Redirect mode string (GA::Session->redirectString)


   L sound.format
        List of supported audio file formats
           (from GA::Client->constSoundFormatHash)
   F sound.allow
        Allow sound effects (GA::Client->allowSoundFlag)
   F sound.ascii
        Allow ASCII bells (GA::Client->allowAsciiBellFlag)
   L sound.effect.list
        List of sound effects (from GA::Client->customSoundHash)
   L sound.effect.NAME
        Full file path to sound effect file NAME
           (from GA::Client->customSoundHash)


   O task.name.NAME
        Current task with unique name 'NAME', e.g. 'status_task_5' (from
           GA::Session->currentTaskHash)
   O task.recent.NAME
        Most recently-created current task with formal name 'NAME', e.g.
           'status_task' (from GA::Session->currentTaskNameHash)
   O task.init.NAME
        Global initial tasklist task called 'NAME' (from
           GA::Client->initTaskHash)
   O task.custom.NAME
        Custom task called 'NAME' (from GA::Client->customTaskHash)
   S task.package.NAME
        Customisable task package name 'NAME' (from GA::Client->taskPackageHash)
   S task.label.LABEL
        Customisable task label 'LABEL' (from GA::Client->taskLabelHash)
   L task.runlist.first
        Customisable task run-first runlist (GA::Client->taskRunFirstList)
   L task.runlist.last
        Customisable task run-last runlist (GA::Client->taskRunLastList)
   O task.current.advance
        Current Advance task (GA::Session->advanceTask)
   O task.current.attack
        Current Attack task (GA::Session->attackTask)
   O task.current.channels
        Current Channels task (GA::Session->channelsTask)
   O task.current.chat
        Lead Chat task (GA::Session->chatTask)
   O task.current.compass
        Current Compass task (GA::Session->compassTask)
   O task.current.condition
        Current Condition task (GA::Session->conditionTask)
   O task.current.divert
        Current Divert task (GA::Session->divertTask)
   O task.current.inventory
        Current Inventory task (GA::Session->inventoryTask)
   O task.current.launch
        Current Launch task (GA::Session->launchTask)
   O task.current.locator
        Current Locator task (GA::Session->locatorTask)
   O task.current.notepad
        Current Notepad task (GA::Session->notepadTask)
   O task.current.rawtext
        Current RawText task (GA::Session->rawTextTask)
   O task.current.rawtoken
        Current RawToken task (GA::Session->rawTokenTask)
   O task.current.status
        Current Status task (GA::Session->statusTask)
   O task.current.system
        Current System task (GA::Session->systemTask)
   O task.current.tasklist
        Current TaskList task (GA::Session->taskListTask)
   O task.current.watch
        Current Watch task (GA::Session->watchTask)


   o template.NAME
        Profile template called 'NAME' (from GA::Session->templateHash)


   o toolbar.NAME
        Toolbar button object called NAME (from GA::Client->toolbarHash)
   L toolbar.list
        Ordered of toolbar button object names (GA::Client->toolbarList)


   F tts.flag.allow
        Allow text-to-speech/TTS (GA::Client->customAllowTTSFlag)
   F tts.flag.smooth
        Allow TTS smoothing (GA::Client->ttsSmoothFlag)
   L tts.engine.list
        List of supported TTS engines (GA::Client->constTTSList)
   L tts.obj.list
        List of TTS configuration objects (from GA::Client->ttsObjHash)
   o tts.obj.NAME
        TTS configuration object called NAME (from GA::Client->ttsObjHash)
   F tts.enable.receive
        Convert text received from world (GA::Client->ttsReceiveFlag)
   F tts.flag.login
        Don't convert text received before login (GA::Client->ttsLoginFlag)
   F tts.enable.system
        Convert system messages (GA::Client->ttsSystemFlag)
   F tts.enable.error
        Convert system error messages (GA::Client->ttsSystemErrorFlag)
   F tts.enable.cmd
        Convert world commands (GA::Client->ttsWorldCmdFlag)
   F tts.enable.dialogue
        Convert 'dialogue' windows (GA::Client->ttsDialogueFlag)
   F tts.enable.task
        Convert (some) task window text (GA::Client->ttsTaskFlag)


   F window.main.share
        Share 'main' windows (GA::Client->shareMainWinFlag)
   S window.main.width
        Default width for 'main' windows (GA::Client->customMainWinWidth)
   S window.main.height
        Default height for 'main' windows (GA::Client->customMainWinHeight)
   S window.grid.width
        Default width for other 'grid' windows (GA::Client->customGridWinWidth)
   S window.grid.height
        Default height for other 'grid' windows
           (GA::Client->customGridWinHeight)
   O window.grid.NUMBER
        'grid' window NUMBER (from GA::Obj::Desktop->gridWinHash)
   O window.free.NUMBER
        'free' window NUMBER (from GA::Obj::Desktop->freeWinHash)
   S window.text.size
        Maximum lines is a textview (GA::Client->customTextBufferSize)
   S window.charset.current
        Current character set (GA::Client->charSet)
   L window.charset.list
        Ordered list of available character sets (GA::Client->charSetList)
   S window.mode.tab
        Session tab mode (GA::Client->sessionTabMode)
   F window.mode.xterm
        Use xterm titles in tabs (GA::Client->xTermTitleFlag)
   F window.mode.long
        Use long world name in tabs (GA::Client->longTabLabelFlag)
   F window.mode.simple
        Allow simple tabs (GA::Client->simpleTabFlag)
   F window.mode.toolbar
        Show toolbar button labels in 'main' and automapper windows
           (GA::Client->toolbarLabelFlag)
   F window.mode.irreversible
        Show icon for irreversible actions in 'edit' windows
           (GA::Client->irreversibleIconFlag)
   F window.mode.urgency
        Show 'main' window urgency hints (GA::Client->mainWinUrgencyFlag)
   F window.mode.tooltip
        Show tooltips in session's default tab (GA::Client->mainWinTooltipFlag)
   F window.confirm.close
        Prompt user before click-close 'main' window
           (GA::Client->confirmCloseMainWinFlag)
   F window.confirm.tab
        Prompt user before click-close tab (GA::Client->confirmCloseTabFlag)
   F window.keys.scroll
        Page up/down/home/end keys scrolls window pane
           (GA::Client->useScrollKeysFlag)
   F window.keys.smooth
        Smooth window pane scrolling (GA::Client->smoothScrollKeysFlag)
   F window.keys.split
        Page up/down/home/end keys enage split screen mode
           (GA::Client->autoSplitKeysFlag)
   F window.keys.complete
        Tab/cursor up/down keys autocomplete instructions
           (GA::Client->useCompleteKeysFlag)
   F window.keys.switch
        CTRL+TAB switches window pane tabs (GA::Client->useSwitchKeysFlag)


   O winmap.NAME
        Winmap object called 'NAME' (from GA::Client->winmapHash)
   S winmap.default.enabled
        Default winmap name for 'main' windows when workspace grids enabled
           (GA::Client->defaultEnabledWinmap)
   S winmap.default.disabled
        Default winmap name for 'main' windows when workspace grids disabled
           (GA::Client->defaultDisabledWinmap)
   S winmap.default.internal
        Default winmap name for other 'grid' windows
           (GA::Client->defaultInternalWinmap)


   S workspace.dir
        Direction of workspace use (GA::Client->initWorkspaceDir)
   S workspace.init.count
        Number of initial workspaces (from GA::Client->initWorkspaceHash)
   S workspace.init.NUMBER
        Default zonemap name for initial workspace NUMBER (from
           GA::Client->initWorkspaceHash)
   F workspace.grid.activate
        Activate workspace grids (GA::Client->activateGridFlag)
   F workspace.grid.permit
        Permit workspace grids (GA::Obj::Desktop->gridPermitFlag)
   S workspace.grid.block
        Size of gridblocks, in pixels (from GA::Client->gridBlockSize)
   S workspace.grid.gap
        Maximum size of grid gaps, in blocks (GA::Client->gridGapMaxSize)
   F workspace.grid.adjust
        Grid adjustment flag (GA::Client->gridAdjustmentFlag)
   F workspace.grid.correct
        Edge correction flag (GA::Client->gridEdgeCorrectionFlag)
   F workspace.grid.reshuffle
        Grid reshuffle flag (GA::Client->gridReshuffleFlag)
   F workspace.grid.invisible
        Grid invisible window flag (GA::Client->gridInvisWinFlag)
   O workspace.obj.NUMBER
        Workspace object NUMBER (from GA::Obj::Desktop->workspaceHash)
   O workspace.grid.NUMBER
        Workspace grid NUMBER (from GA::Obj::Desktop->gridHash)


   o world.current
        Current world profile (GA::Session->currentWorld)
   o world.NAME
        World profile called 'NAME' (from GA::Client->worldProfHash)
   L world.list.favourite
   L world.list.favorite
        Favourite world list (GA::Client->favouriteWorldList)
   L world.list.basic
        Basic world list (from GA::Client->constBasicWorldHash)
   F world.flag.history
        Store connection history in world profile
           (GA::Client->connectHistoryFlag)


   L zmp.list
        List of (all) ZMP packages created by plugins
   L zmp.list.PACKAGE[.SUBPACKAGE]
        Value of supported commands in the ZMP package
           

   O zonemap.NAME
        Zonemap object called 'NAME' (from GA::Client->zonemapHash)
